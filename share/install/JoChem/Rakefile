require 'rbbt/util/open'
require 'rbbt/util/misc'

def read_chunk(jochem)
  chunk = ""
  while (not jochem.eof? and not (line = Misc.fixutf8(jochem.gets)).match(/^--/))
    chunk << line
  end
  return nil if chunk.empty?
  chunk
end

def first(list)
  return nil if list.nil? or list.empty?
  list.first
end

def process_jochem
  jochem = Open.open("http://www.biosemantics.org/downloads/file/Jochem/JochemV1_2.zip")
  identifiers = File.open('identifiers', 'w')

  identifiers.puts("#: :namespace=JoChem")
  identifiers.puts("#ID\tCompound Name\tPubChem:Substance ID\tPubChem:Coumpound ID\tDrugBank:ID\tChemIDplus:ID\tCAS:ID\tMeSH:Term\tChEBI:ID\tHMDB:ID\tKEGG:Coumpound ID\tKEGG:Drug ID")

  lexicon = File.open('lexicon', 'w')
  lexicon.puts("#: :namespace=JoChem")
  lexicon.puts("#ID\tSynonyms")

  inchi = File.open('inchi', 'w')
  inchi.puts("#: :namespace=JoChem")
  inchi.puts("#ID\tInChi")

  definitions = File.open('definitions', 'w')
  definitions.puts("#: :namespace=JoChem#:type=:list")
  definitions.puts("#ID\tDefinition")

  while chunk = read_chunk(jochem) do
    next if chunk.empty? or chunk =~ /^#/ or chunk =~ /^NS /
      info = {}
      chunk.split(/\n/).each do |line|
      line.sub!(/\t@match.*/,'')
      code, value = line.match(/([A-Z]*) (.*)/).values_at 1, 2
      info[code] ||= []
      info[code] << value
    end
    id = first(info["ID"])
    na = first(info["NA"])
    df = first(info["DF"])
    tm = info["TM"] || []
    db = info["DB"] || []

    cheb = db.collect{|code| code.match(/CHEB_(.*)/) ? $1 : nil}.compact
    chid = db.collect{|code| code.match(/CHID_(.*)/) ? $1 : nil}.compact
    pubc = db.collect{|code| code.match(/PUBC_(.*)/) ? $1 : nil}.compact
    pubs = db.collect{|code| code.match(/PUBS_(.*)/) ? $1 : nil}.compact
    drug = db.collect{|code| code.match(/DRUG_(.*)/) ? $1 : nil}.compact
    cas  = db.collect{|code| code.match(/CAS_(.*)/) ? $1 : nil}.compact
    mesh = db.collect{|code| code.match(/MESH_(.*)/) ? $1 : nil}.compact
    hmdb = db.collect{|code| code.match(/HMDB_(.*)/) ? $1 : nil}.compact
    kegg = db.collect{|code| code.match(/KEGG_(.*)/) ? $1 : nil}.compact
    kegd = db.collect{|code| code.match(/KEGD_(.*)/) ? $1 : nil}.compact
    inch = db.collect{|code| code.match(/INCH_InChI=(.*)/) ? $1 : nil}.compact

    lexicon.puts [id, tm.unshift(na) * "|"] * "\t"
    identifiers.puts [id, na, pubs * "|", pubc * "|", drug * "|", chid * "|", cas * "|", mesh * "|", cheb * "|", hmdb * "|", kegg * "|", kegd * "|" ] * "\t"
    inchi.puts [id, inch * "|"] * "\t" if inch.any?
    definitions.puts [id, df] * "\t" unless df.nil?
  end
end

rule /identifiers|lexicon|inchi|definitions/ do |t|
  Misc.in_dir(File.dirname(t.name)) do
    process_jochem
  end
end
