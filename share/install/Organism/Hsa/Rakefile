$LOAD_PATH.unshift(File.join(File.dirname(__FILE__),'..', '..', '..', '..', 'lib'))
require 'rbbt/sources/biomart'
require 'rbbt/sources/entrez'
require File.join(File.dirname(__FILE__), '../../lib/helpers')

$taxs = [9606]
$biomart_db = 'hsapiens_gene_ensembl'
$biomart_main = ['Entrez Gene ID', 'entrezgene']
$biomart_ensembl = ['Ensembl Gene ID', 'ensembl_gene_id']
$biomart_ensembl_protein = ['Ensembl Protein ID', 'ensembl_peptide_id']
$biomart_ensembl_exon = ['Ensembl Exon ID', 'ensembl_exon_id']
$biomart_lexicon = [ 
  [ 'Associated Gene Name' , "external_gene_id"], 
  [ 'HGNC symbol', "hgnc_symbol"  ],
  [ 'HGNC automatic gene name', "hgnc_automatic_gene_name"  ],
  [ 'HGNC curated gene name ', "hgnc_curated_gene_name"  ],
]

$biomart_identifiers = [ 
  [ 'Ensembl Gene ID', "ensembl_gene_id"  ],
  [ 'Ensembl Protein ID', "ensembl_peptide_id"  ],
  [ 'Associated Gene Name', "external_gene_id"  ],
  [ 'CCDS ID', "ccds"  ],
  [ 'Protein ID', "protein_id"  ],
  [ 'RefSeq Protein ID', "refseq_peptide"  ],
  [ 'Unigene ID', "unigene"  ],
  [ 'UniProt/SwissProt ID', "uniprot_swissprot"  ],
  [ 'UniProt/SwissProt Accession', "uniprot_swissprot_accession"  ],
  [ 'HGNC ID', "hgnc_id", 'HGNC'],
  [ 'EMBL (Genbank) ID' , "embl"] , 

  # Affymetrix
  [ 'AFFY HC G110', 'affy_hc_g110' ],
  [ 'AFFY HG FOCUS', 'affy_hg_focus' ],
  [ 'AFFY HG U133-PLUS-2', 'affy_hg_u133_plus_2' ],
  [ 'AFFY HG U133A_2', 'affy_hg_u133a_2' ],
  [ 'AFFY HG U133A', 'affy_hg_u133a' ],
  [ 'AFFY HG U133B', 'affy_hg_u133b' ],
  [ 'AFFY HG U95AV2', 'affy_hg_u95av2' ],
  [ 'AFFY HG U95B', 'affy_hg_u95b' ],
  [ 'AFFY HG U95C', 'affy_hg_u95c' ],
  [ 'AFFY HG U95D', 'affy_hg_u95d' ],
  [ 'AFFY HG U95E', 'affy_hg_u95e' ],
  [ 'AFFY HG U95A', 'affy_hg_u95a' ],
  [ 'AFFY HUGENEFL', 'affy_hugenefl' ],
  [ 'AFFY HuEx', 'affy_huex_1_0_st_v2' ],
  [ 'AFFY HuGene', 'affy_hugene_1_0_st_v1' ],
  [ 'AFFY U133 X3P', 'affy_u133_x3p' ],
  [ 'Agilent WholeGenome',"agilent_wholegenome" ],
  [ 'Agilent CGH 44b', 'agilent_cgh_44b' ],
  [ 'Codelink ID', 'codelink' ],
  [ 'Illumina HumanWG 6 v2', 'illumina_humanwg_6_v2' ],
  [ 'Illumina HumanWG 6 v3', 'illumina_humanwg_6_v3' ],
]

$biomart_positions = [
  ['Chromosome Name','chromosome_name'],
  ['Strand','strand'],
  ['Gene Start','start_position'],
  ['Gene End','end_position'],
  ['Transcript Start','transcript_start'],
  ['Transcript End','transcript_end'],
]

$biomart_exons = [
  ['Exon Chr Start','exon_chrom_start'],
  ['Exon Chr End','exon_chrom_end'],
  ['Ensembl Gene ID', 'ensembl_gene_id'],
#  ['Constitutive Exon','is_constitutive'],
]

$biomart_sequence = [
  ['Gene Sequence','gene_exon_intron'],
]

$biomart_protein_sequence = [
  ['Protein Sequence','peptide'],
]

$biomart_germline_variation_id = ['Variation ID', "external_id" ]
$biomart_germline_variations = [
  $biomart_ensembl,
  ['Chromosome Location (bp)', "chromosome_location" ],
  ['SNP Chromosome Strand', "snp_chromosome_strand" ],
  ['Transcript location (bp)', "transcript_location" ],
  ['Allele', "allele" ],
  ['Protein Allele', "peptide_shift" ],
  ['Source', "source_name" ],
  ['Validated', "validated" ],
  ['CDS Start', "cds_start_2024" ],
  ['CDS End', "cds_end_2024" ],
  ['Consequence Type', "synonymous_status" ],
]

$biomart_somatic_variation_id = ['Variation ID', "somatic_reference_id" ]
$biomart_somatic_variations = [
  $biomart_ensembl,
  ['Chromosome Location (bp)' , "somatic_chromosome_location" ]   , 
  ['SNP Chromosome Strand'    , "somatic_snp_chromosome_strand" ] , 
  ['Transcript location (bp)' , "somatic_transcript_location" ]   , 
  ['Allele'                   , "somatic_allele" ]                , 
  ['Protein Allele'           , "somatic_peptide_shift" ]         , 
  ['Source'                   , "somatic_source_name" ]           , 
  ['Validated'                , "somatic_validated" ]             , 
  ['CDS Start'                , "somatic_cds_start_2024" ]        , 
  ['CDS End'                  , "somatic_cds_end_2024" ]          , 
  ['Consequence Type'         , "somatic_synonymous_status" ]     , 
]

file 'scientific_name' do |t|
  File.open(t.name, 'w') do |f| f.puts "Homo sapiens" end
end

file 'lexicon' do |t|
  lexicon = tsv_file('http://www.genenames.org/cgi-bin/hgnc_downloads.cgi?title=HGNC+output+data&hgnc_dbtag=on&col=gd_hgnc_id&col=gd_app_sym&col=gd_app_name&col=gd_prev_sym&col=gd_prev_name&col=gd_aliases&col=gd_name_aliases&col=gd_pub_acc_ids&status=Approved&status_opt=2&level=pri&=on&where=&order_by=gd_app_sym_sort&limit=&format=text&submit=submit&.cgifields=&.cgifields=level&.cgifields=chr&.cgifields=status&.cgifields=hgnc_dbtag',
                     "HGNC ID", nil, :type => :flat, :header_hash => '')
  lexicon = merge_biomart lexicon, $biomart_db, $biomart_main, $biomart_lexicon, "HGNC ID"

  File.open(t.name, 'w') do |f| f.puts lexicon end
end

file 'identifiers' do |t|
  identifiers = BioMart.tsv($biomart_db, $biomart_main, $biomart_identifiers)
  $biomart_identifiers.each do |name, key, prefix|
    if prefix
      identifiers.process name do |field, key, values| field.each{|v| v.replace "#{prefix}:#{v}"} end
    end
  end

  File.open(t.name, 'w') do |f| f.puts identifiers end
end

file 'gene_go' do |t|
  url = "http://cvsweb.geneontology.org/cgi-bin/cvsweb.cgi/go/gene-associations/gene_association.goa_human.gz?rev=HEAD"
  tsv = TSV.new(Open.open(url, :gzip => true), :key => 2, :fields => 4)

  index = TSV.index(Organism::Hsa.identifiers, :persistence => true)
  new = TSV.new({})
  tsv.through do |key, values|
    next if index[key].nil?
    new_key = index[key].first
    new[new_key] = values
  end


  new.key_field = "Associated Gene Name"
  new.fields = ["GO Term"]
  Open.write(t.name, new.to_s)
end

file 'gene_pmids' do |t|
  tsv =  Entrez.entrez2pubmed($taxs)
  tsv.namespace = "Hsa"
  text = "#Entrez Gene ID\tPMID"
  tsv.each do |gene, pmids|
    text << "\n" << gene << "\t" << pmids * "|"
  end
  Open.write(t.name, text)
end

file 'gene_positions' do |t|
  BioMart.set_archive('may2009')
  positions = BioMart.tsv($biomart_db, $biomart_ensembl, $biomart_positions, [])
  BioMart.unset_archive

  Open.write(t.name, positions.to_s)
end

file 'gene_exons' do |t|
  BioMart.set_archive('may2009')
  positions = BioMart.tsv($biomart_db, $biomart_ensembl_exon, $biomart_exons, [])
  BioMart.unset_archive

  Open.write(t.name, positions.to_s)
end

file 'gene_sequence' do |t|
  BioMart.set_archive('may2009')
  positions = BioMart.tsv($biomart_db, $biomart_ensembl, $biomart_sequence, [])
  BioMart.unset_archive

  positions.key_field = $biomart_sequence.first.first
  positions.fields = [$biomart_ensembl.first]

  positions = positions.reorder $biomart_ensembl.first, [:key]

  Open.write(t.name, positions.to_s)
end

file 'germline_variations' do |t|
  positions = BioMart.tsv($biomart_db, $biomart_germline_variation_id, $biomart_germline_variations, [])
end


file 'somatic_variations' do |t|
  positions = BioMart.tsv($biomart_db, $biomart_somatic_variation_id, $biomart_somatic_variations, [])
end

file 'protein_sequence' do |t|
  BioMart.set_archive('may2009')
  positions = BioMart.tsv($biomart_db, $biomart_ensembl_protein, $biomart_protein_sequence, [])
  BioMart.unset_archive

  positions.key_field = $biomart_protein_sequence.first.first
  positions.fields = [$biomart_ensembl_protein.first]

  positions = positions.reorder $biomart_ensembl_protein.first, [:key]

  Open.write(t.name, positions.to_s)
end


task :default => ['name', 'lexicon', 'identifiers', 'gene_positions']


